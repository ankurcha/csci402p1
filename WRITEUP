Title: Writeup for Project 4, Fall 2009

Date: 11/01/2009

Group Num 11: Name              Email               Student ID
              Ankur Chauhan     ankurcha@usc.edu    8478-1604-85
              Max Pflueger      pflueger@usc.edu    5888-2249-87
              Aneesha Mathew    aneesham@usc.edu    3976-3694-15

 vim:textwidth=75

I. Requirements:
    Part 1:
        
II. Assumptions:
        
III. Design:

    Part 1:
	+ Configuration file design
	    The configuration file is used to tell the number of entities of each type that we wish to create.
	    The format of the configuration is fairly simple.
		Number of Patients, Number of Receptionists, Number of Door boys, Number of Doctors, 
		Number of Cashiers, Number of Clerks, Number of Hospital Managers
		
		Example configuration file
		  20,3,2,2,3,2,1

IV. Implementation:

    + Files Modified
        userprog/exception.cc
        userprog/addrspace.h|c
        userprog/syscall.h

    + Files added
        test/cash.c
        test/clerk.c
        test/disthosp.c
        test/doctor.c
        test/doorboy.c
        test/eventDispatcher.c
        test/eventDispatcher.h
        test/heap.c
        test/heap.h
        test/hospManager.c
        test/hospShared.c
        test/hospShared.h
        test/init.h
        test/itoa.c
        test/itoa.h
        test/p2pnetwork.c
        test/p2pnetwork.h
        test/packet.c
        test/packet.h
        test/patient.c
        test/receptionist.c
        test/string.c
        test/string.h
    + Data Structures added, and the file they were added to.
        - test/packet.h
            Packet{
                int senderId;
                int timestamp;
                char data[MaxDataSize];
            };
         - test/eventDispatcher.h
            
    + Data Structures modified, and the file they were added to.

    + Functions added and in which file.
        - test/hospShared.h|c
            Packet* buildPacket_Receptionist(Packet *p, int id, int peopleInLine,
                    int currentToken);
            Packet *buildPacket_Doctor(Packet *p, int id, int peopleInLine,
                    int prescription, int patientToken);
            Packet *buildPacket_Cashier(Packet *p, int id, int lineLength, int patToken,
                    int fee, int payment, int sales);
            Packet *buildPacket_Clerk(Packet *p, int id, int patientsInLine, int payment,
                    int fee, int patPrescription, int sales);
            Packet *buildPacket_GlobalData(Packet *p, short variable, int val);
            Packet *buildPacket_GlobalListAppend(Packet *p, int key, int val);
            Packet *buildPacket_GlobalQueuePush(Packet *p, int val);
            Packet *buildPacket_GlobalQueuePop(Packet *p);
        
        - test/
    + Functions modified and in which file.

V. Testing: (For each test case, you must show)
    + How to test

    + Test Output

VI. Discussion:
    + Experiment expectation.
                            
    + Experiment result.

    + Explanation

VII. Miscellaneous:
