Title: Writeup for Project 1, Fall 2009

Date: 09/19/09

Group Num 11: Name              Email               Student ID
              Ankur Chauhan     ankurcha@usc.edu    8478-1604-85
              Max Pflueger      pflueger@usc.edu    5888-2249-87
              Aneesha Mathew    aneesham@usc.edu    3976-3694-15

 vim:textwidth=75

I. Requirements:
    + Part 1:

        We are expected to implement all methods for the Lock and Condition
        classes.  Our code should not assume that threads will always follow
        the rules, and should check for and report illegal operations, like
        releasing a lock the thread does not own.  If a thread performs an
        illegal operation, an error will be printed, but the error will be
        ignored and the thread will continue to function.  For the condition
        class our code will follow Mesa semantics, meaning that when a thread
        wakes up on a condition variable, it will go to the back of the run
        queue, not the front.

    + Part 2:

        We are expected to build a hospital simulation that conforms to the
        interaction rules specified in the problem statement.  The simulation
        has to be multi-threaded and should use only the Lock and Condition
        classes from part 1 for synchronization.  The simulation should be
        robust to context switches and should not contain any race conditions.
        Each type of person in the hospital should be represented by a type of
        thread and all their interactions should be simulated by thread
        interactions.

        Additionally we are expected to implement tests to verify each of the
        conditions specified under testing.  These tests shoud be easy to run
        with nachos on the command line.

II. Assumptions:

    We assume:
        -Functions provided by NACHOS are generally bug free and perform as
        specified.
        -As specified in the problem documentations, we have implemented MESA
        style Condition variables.
        -We would use primitive thread routines for our implementation instead
        of semaphores.

III. Design:

    Part 1:

        Lock class:
            The primary functionality of the Lock class is the Acquire and
            Release functions.  Both of these function need to be guaranteed to
            be atomic and to ensure this we disabled interrupts during their
            operation.  We also implemented the isHeldByCurrentThread function
            which simply returns true if the lock is owned by the current
            thread

            Acquire()
                The acquire function is designed to guarantee that when it
                exits the lock will be locked and the current thread will be
                the owner of that lock.  If that is already the state the
                function exits immediately.  If the function need to acquire
                the lock and it is already locked, is puts itself in a queue of
                threads waiting for ownership, and sleeps until woken by a call
                to release elsewhere.  My Release implementation guarantees
                that the woken thread owns the lock, but Acquire does not make
                that assumption, and verifies that it owns the lock upon waking
                before continuing.

            Release()
                The release function is designed to release the ownership of a
                lock when a thread is done with it.  In addition to simply
                releasing the lock, it is the responsibility of Release to wake
                up the next thread waiting for a lock, if any threads are
                waiting.  Release first ensures that it is releasing a lock
                that it owns, otherwise it throws out an error message and
                returns.  If noone is waiting in the queue Release simply
                clears the lock and returns.  If someone is waiting, Release
                puts the lock in that thread's name and puts that thread on the
                run queue before returning.

        Condition class:
            The Condition class is designed to allow threads to queue up behind
            a perticular event or series of events initiated but a different
            thread.  In particular it uses a lock to ensure that the thread
            being woken does not become active until the waking thread has
            released the lock, thus allowing threads to sequence events with
            each other.  The main methods are Wait(), Signal(), and
            Broadcast(), and all three of them take a Lock* as an argument.
            All three need to be ensured atomic and this is guaranteed in our
            implementation by disabling interrupts during their operation.

            Wait()
                Wait first ensures that the calling thread owns the lock it
                passed as an argument, and that that lock is the same one being
                used by this CV, of course, if no one is waiting on this CV,
                then there is no lock associated with it, and the new lock is
                used.  With lock ownership and validity established, Wait puts
                itself on the queue for this CV, releases the lock, and sleeps.
                It will be woken in turn by a Signal from another thread that
                owns the lock.  As soon as it wakes it reacquires the lock and
                exits.  The reacquiring the lock is key since it won't exit
                until the signalling thread has released the lock, thus
                ensuring synchronous behavior.

            Signal()
                Signal wakes up a thread to conitnue running as soon as the
                lock is released.  If no threads are waiting it does nothing.
                Similar to Wait, it throws an error message if the calling lock
                does not match the lock associated with this CV.  With those
                checks passed, Signal wakes up the top thread on the queue.
                Signal also clears the lock if noone is left waiting.

            Broadcast()
                Broadcast is (as is implemented as) as special case of Signal
                that simply calls Signal once for every thread remaining in the
                Queue.  This is useful if you wish to wake all the threads
                waiting on a condition variable at once.

    Part 2:
        
        The hospital simulation is implemented in init.cc and patient.cc, with
        the bulk of the code in init.cc.  The important parts of the simulation
        consist of the 7 functions that define the threads corresponding to the
        actors present in the hospital, as well as the HospINIT function which
        brings all the threads to life.

        patients(int ID)
            The patient threads behave in the following way:
            1. Come to the Hospital
                When the patient comes into being, it acquires a lock over
                all the lines of the receptionist so that it can take the
                decision of which line is the shortest.
            2. Meets the receptionist to get a unique token number
                At this point the patient is waiting on the Condition Variable
                for the receptionist that it selected in the previous step, 
                till the point the receptionist signals the patient to come 
                forward and take the token generated by it. This is done in
                a two step handshake. After getting the token, the patient 
                randomly assigns to itself a doctor.
            3. Stands in line to get a chance to meet the doctor.
                After selecting the doctor, the patient goes and waits on
                that doctors waiting queue till it gets a signal to proceed
                form the doorboy that is helping that doctor.
            4 Waits for the door boy to call them when their turn comes.
                During this time, the doctor may go on break and only when
                the doctor returns he can start consulting the patient therefore
                the patient must wait for the doctor to call him.
            5. Consults the doctor.
                During this time the patient and doctore interact, the consultation
                involves the doctor to yield for a random number of cycles.
                During this, the patient passes its token number to the doctor.
            6. Gets the prescription
                The patient is assigned a number(randomly generated) which is 
                taken as the prescription and would be later used to obtain 
                medicines from the pharmacy clerk.
            7. Comes out to get in the shortest line of a cashier
                When the doctor signals the patient that he is done consulting,
                the patient leaves and searches for the shortest line among
                all the cashiers. This is done in the exact same manner as 
                we did for selecting the receptionist in the step 2.
            8. Ask the cashier about the consultancy fees
                When the cashier signals the patient, the patient provides
                its token number and the cashier looks up the fees to be taken
                from this patient as directed by the doctor. This is stored
                in a linked list which has the key value pairings of the token
                to the fee to be collected.
            10. Pays the consultancy fees
                Once the cashier signals the patient to pay the fees, a handshake
                of wait and signal calls takes place between them which denotes
                the payment of the fees by the patient to the cashier.
                Once this is done, the patient thread continues.
            11. Meets the pharmacy clerk to buy medicines.
                The patient thread, again uses the process as desctibes in 
                step 2 to calculate which clerk line it should get in to.
                Then it waits in the queue to be signalled by the corresponding
                clerk.
            12. Gives the prescription
                When the pharmacy clerk signals the patient, the patient
                thread replies by setting the prescription number given by
                the doctor. This is then used to get the medicines.
            13. Gets the medicine
                The pharmacy clerk will reply with a number denoting the medicines
                that the patient is supposed to get. This whole process is done
                in a similar handshake manner involving signals from the clerk
                thread to the waiting patient thread.
            14. Pays the bill amount
                As a final step, the patient does another signal on the waiting
                clerk thread to denote the payment for he medicines that it
                received in the previous step. After this the work of the patient
                thread is over and it continues to terminate.
            15. Leaves the hospital
                The patient thread terminates and ceases to exit.

        doctor(int ID)

        receptionist(int ID)

        cashier(int ID)

        doorboy(int ID)
            To organize the doorboy threads such that all of the doorboys
            are available to which ever doctor wants them and that there is
            no binding of a doorboy to a particular doctor, they are put in
            a queue, made using a condition variable called doorboyLineCV.
            The doctors signal for a doorboy whenever they are ready to accept
            more patients. The requests for doorboys are also queued onto a
            list wakingDoctorList and as each of the doorboys come alive they
            pick up each of these requests and service the corresponding doctor.
            At this time, the doorboys check the queue of patients of that 
            doctor and and tells the signals the patients, if any, to 
            continue to meet the doctor.
            In case there are no patients that are waiting for the doctor,
            the doorboy goes to sleep and would only wake up by getting
            signalled by the Hospital Manager.
            This process keeps repeating till all the patients are done.
            
        clerk(int ID)

        hospitalManager(int ID)

        HospINIT(int testmode = 0)

IV. Implementation:

    + Files Modified

        threads/Makefile                  
        threads/main.cc                   
        threads/synch.cc                  
        threads/synch.h                   
        threads/threadtest.cc             

    + Files added

        threads/init.cc                   
        threads/patient.cc                
        threads/test_code.cc - This file is as provided, so i will not list
            anything in it as changes below

    + Data Structures added, and the file they were added to.

        init.cc:
            struct node
            struct linkedlist
            struct Receptionists
            struct Cashier
            struct PharmacyClerks
            struct Doctor
            struct DoorBoy

    + Data Structures modified, and the file they were added to.

        class Lock     -- in synch.cc/synch.h
        {
            Added data:
            Thread *owner;
            int numWaiting;
            List *queue;
            bool islocked;
            
            Modified Methods:
            Lock()
            ~Lock()
            Acquire()
            Release()
            isHeldByCurrentThread()
        }

        class Condition    -- in synch.cc/synch.h
        {
            Added data:
            List* queue;
            Lock* CVLock;

            Modified Methods:
            Condition()
            ~Condition()
            Wait()
            Signal()
            Broadcast()
        }

    + Functions added and in which file.

        threadtest.cc:
            Problem2()

        init.cc:
            void doorboy(int)
            void doctor(int)
            void receptionist(int)
            void cashier(int)
            void clerk(int)
            void hospitalManager(int)
            void HospINIT()
            int test1()
            int test2()
            int test4()
            int test7()

        patient.cc:
            void patients(int)

    + Functions modified and in which file.
        
        main.cc:
            Added command line options to run ThreadTest(), TestSuite(), and
            Problem2().

V. Testing: (For each test case, you must show)
    + How to test

        -Test Case 1: Patients only get in when the doorboy asks them to.

            In this test, we initialize all the threads in the hospital
            simulation except the doorboy threads hence all the patients would
            get till the point that they have the token as given by the
            receptionist and select the doctor they want to see but do not
            continue beyond that and perpetually sleep as there is no one to
            wake them up and send them to the doctor.  
            
            To run this test code:
             %threads/nachos -P2 1 -rs {your seed} 1| grep 'P_'
         
         -Test Case 2: If the door boy in on a break no patient gets in. 

            In this test, We put all the Doorboy's to sleep. Thus interfering
            with the doorboy and patient communication, Not letting the
            patient enter the doctors office and be serviced.

            To run this test code:
            %threads/nachos -P2 -rs {your seed} 1| grep "TEST2"


        -Test Case 3: Only one patient gets to see a given doctor at at
         instance of time

            To run this test run nachos as follows:
            
            %threads/nachos -P2 3 -rs {your seed} 1| grep "Consulting doctor x"

            Where x is the ID of one of the doctors. 
            
            
        -Test Case 4: Patient always choose the shortest line with the cashier,
            pharmacy clerk and the receptionist.
            
            To run this test run nachos as follows:
            
            %threads/nachos -P2 4 -rs {your seed} 1| grep "TEST4:"

            In this test, all the threads are initialized as normal but when
            the patient is trying to search through the receptionists' lines
            the verbosity of the program is increase and this search process
            is made visible. Hence, the user can see the individual lengths
            of each of the lines and also the final line chosen by the patient.


        -Test Case 5: If there is no cashier/pharmacy clerk/receptionist the
         patient get to wait.

            Part 1: If there are no receptionists.
            
            %threads/nachos -P2 51 -rs {your seed}
            
            The patients would now arrive and would just start waiting for
            the receptionists to give them tokens. But as these threads are
            never initialized they would be in that state for ever. Just to
            make sure that the Hospital manager doesn't go into a never ending
            loop we stop its execution after 10 rounds.
            
            Similarly,
            
            Part 2: If there are no cashiers
            
            %threads/nachos -P2 52 -rs {your seed}
            
            Part 3: If there are no clerks
            
            %threads/nachos -P2 53 -rs {your seed}

        -Test Case 6: The doctor is going on break at random intervals.

            To run this test run nachos as follows:

            %threads/nachos -P2 6 -rs {your seed} 1| grep 'D_.*break'

        -Test Case 7:When the doctor is at break no patient gets in. 

            To run this test run nachos as follows:

           %threads/nachos -P2 -rs {your seed} | grep TEST7

        -Test Case 8: Doorboy never goes on break when doctor is on break.

            %threads/nachos -P2 8 -rs {your seed} 1| grep 'T8'

        -Test Case 9:Door boy/Cashier/Pharmacy clerk getting signaled by 
        hospital manager when patients are waiting

            %threads/nachos -P2 9 -rs {your seed} 1| grep 'H_'

        -Test Case 10: The total sales of medicines and the total consultation
         fees never get affected by race conditions.

            To run this test run nachos as follows:

            %threads/nachos -P2 10 -rs {your seed} 1| grep T10

        -Test Case 11: Doorboy/Clerk/Receptionist/Cashier go on break if the line is empty.

            %threads/nachos -P2 11 -rs {your seed} 1| grep 'T11'

    + Test Output

        -Test Case 1:

            We would see the following messages from any of the patients:
            
            P_0:Attempt to acquire recpLineLock...
            P_0:success
            P_0: found shortest line R_0 len: 0
            P_0 Got woken up, get out of line and going to counter for token    
            P_0: Reading Token..
            P_0: My token is 1..yeah!!
            P_0: Signal receptionist R_0 to continue, I am done
            P_0 : Going to meet doctor D_1
            P_0 : Join line and Waiting for doorboy to tell me to go
            
            As we can see that all the patients would halt at this point. Hence
            proving to us that they cannot continue without a doorboy.
            
        -Test Case 2:
 
            The output:
            DB_0:TEST2: Servicing D_0
            DB_1:TEST2: Servicing D_1
            DB_0:TEST2: Yawn!!...ZZZZzzzzz....
            DB_1:TEST2: Yawn!!...ZZZZzzzzz....
            P_0 :TEST2: Going to meet doctor D_0
            P_0 :TEST2: Join line and Waiting for doorboy to tell me to go <---
            P_1 :TEST2: Going to meet doctor D_1
            P_1 :TEST2: Join line and Waiting for doorboy to tell me to go <---
 
            Both patients P_0 and P_1 keep waiting for the signal from 
            the doorboy.
            
            Patient waits infinitely to consult the doctor, but will
            not succeed as the Doorboy's are asleep.


        -Test Case 3:

            The output from the grep command will show all the patients who
            enter and exit interaction with doctor x.  Verify that no patient
            enters consultation with a doctor before the previous one has
            finished.

        -Test Case 4:

            The user would see the normal output as given during a regular 
            run, additionally the user will see the following for each patients
            thread:
            
            P_3: Searching for the receptionist with the shortest line
            P_3: TEST4: Length of line at R_0 = 1
            P_3: TEST4: Length of line at R_1 = 1
            P_3: TEST4: Length of line at R_2 = 1
            P_3: TEST4: Length of line at R_3 = 0
            P_3: Found shortest line with R_3 len: 0   <======
            P_4:Attempt to acquire recpLineLock...
            P_4:success
            P_4: Searching for the receptionist with the shortest line
            P_4: TEST4: Length of line at R_0 = 1
            P_4: TEST4: Length of line at R_1 = 1
            P_4: TEST4: Length of line at R_2 = 1
            P_4: TEST4: Length of line at R_3 = 1
            P_4: Found shortest line with R_0 len: 1   <======
            
            As we see here P_3 searches through all the lines and find the
            shortest one. Then it chooses the corresponding receptionist
            as marked. Similarly, when the line selection happens with the
            pharmacy clerk or the chashier.

        -Test Case 5:

            Part 1:
                The user would see that the patient threads will get into
                the lines for the receptionists but would keep waiting there
                to be serviced. This will never happen and eventually the
                simulation comes to an end.
                
            Part 2:
                The user would see that the patient thread gets treated by 
                the doctor but would be always waiting for the cashier to
                call him and hence would sit at that position. The simulation
                would then come to an end.
            
            Part 3:
                The user would see that the patient thread gets treated by 
                the doctor, pays up to the cashier but would be always 
                waiting for the pharmacy clerk to call him and hence would 
                sit at that position. The simulation would then come to an 
                end.
            
        -Test Case 6:

            The output from this test will show a line every time a doctor
            sleeps and for how long.  Verify that these statements show doctors
            sleeping for randomized times for different seed values.  Also look
            for variation in the number of times each doctor sleeps,
            demonstrating that they don't always sleep.

        -Test Case 7:
                  
           P_0 :TEST7: Waiting in doctor D_0 Queue
           P_1 :TEST7: Waiting in doctor D_1 Queue
           P_2 :TEST7: Waiting in doctor D_0 Queue
         	 P_3 :TEST7: Waiting in doctor D_1 Queue
           D_0 :TEST7: Going on break for 35 cycles!
           D_1 :TEST7: Going on break for 35 cycles!
           P_4 :TEST7: Waiting in doctor D_0 Queue
           P_5 :TEST7: Waiting in doctor D_1 Queue
           D_0 :TEST7: Back from Break,Signalling patient to come in.
           D_1 :TEST7: Back from Break,Signalling patient to come in.
           P_0 :TEST7: Consulting Doctor D_0 now...
           P_1 :TEST7: Consulting Doctor D_1 now...
        
          Thus we see that the patients P_0 and P_1 can only consult the 
          doctor once the doctors are back from break.When the doctor 
          on break no patient can get in.
   

        -Test Case 8:

            The output from this test will show every time doctor 0 goes on
            break and comes back and every time the doorboy servicing doctor 0
            goes on break and comes back.  Verify for multiple seed values that
            they are never on break at the same time.

        -Test Case 9:

            The user is able to see the transactions involving the hospital
            manager. In this we would be able to see that the hospital manager
            gets up at random intervals and does rounds, this involves waking
            up clerks, cashiers, receptionists and doorboys in case there
            are patients that need to be serviced and are waiting.

        -Test Case 10:

            The output will show the value of our total sales variable as
            compared to the individual sums of each cashier/clerk, and the
            total of those sums.  If the two totals match, then the
            cashiers/clerks did not encounter race conditions modifying the
            total sales variable.

        -Test Case 11:
            
            The output will show everytime a Cashier, Pharmacy Clerk,
            Receptionist or Doorboy goes on break because the line is empty.
            Verify that they all go on break.


VI. Discussion:
    + Experiment expectation.  
        -Part 1: Locks and Condition Variables
            The Lock and Condition classes have been appropriately implemented.
            All test cases should pass and for the negative test cases error
            messages should be printed and the should not crash or fault in
            any case.
        -Part 2: Hospital Management Simulation.
            Each of the agents(Patient, Doctor, Receptionist, Cashier, Clerk
            and Hospital Manager) have been implemented properly. Their
            interactions have been appropriately synchronized and there are
            no race conditions. Additionally, all prescribed test cases must
            pass.
            
    + Experiment result.
        -Part 1: Locks and Condition Variables
            All the test cases passed as expected. We ran the provided test
            cases (test_code.cc) for multiple values of -rs. Appropriate error
            messages were also displayed in case of the negative test cases.
        -Part 2: Hospital Management Simulation.
            All the test cases were appropriately implemented and the simulation
            performed as expected for any given value of -rs. In addition, 
            in order to enable easy tracability of the interactions the verbosity
            of the threads has been kept high, with almost all interactions
            being logged to standard output.
        
    + Explanation
        As the the expectation and the results match, we conclude that both 
        the parts have been properly implemented.

VII. Miscellaneous:

