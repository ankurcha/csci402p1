Title: Writeup for Project 1, Fall 2009

Date: 09/19/09

Group Num 11: Name              Email               Student ID
              Ankur Chauhan     ankurcha@usc.edu    
              Max Pflueger      pflueger@usc.edu    5888-2249-87
              Aneesha Mathew    aneesham@usc.edu    

 vim:textwidth=75

I. Requirements:
    + Part 1:

        We are expected to implement all methods for the Lock and Condition
        classes.  Our code should not assume that threads will always follow
        the rules, and should check for and report illegal operations, like
        releasing a lock the thread does not own.  If a thread performs an
        illegal operation, an error will be printed, but the error will be
        ignored and the thread will continue to function.  For the condition
        class our code will follow Mesa semantics, meaning that when a thread
        wakes up on a condition variable, it will go to the back of the run
        queue, not the front.

    + Part 2:

        We are expected to build a hospital simulation that conforms to the
        interaction rules specified in the problem statement.  The simulation
        has to be multi-threaded and should use only the Lock and Condition
        classes from part 1 for synchronization.  The simulation should be
        robust to context switches and should not contain any race conditions.
        Each type of person in the hospital should be represented by a type of
        thread and all their interactions should be simulated by thread
        interactions.

        Additionally we are expected to implement tests to verify each of the
        conditions specified under testing.  These tests shoud be easy to run
        with nachos on the command line.

II. Assumptions:

    We assume:
        -Functions provided by NACHOS are generally bug free and perform as
        specified.

III. Design:

    TODO

IV. Implementation:

    + Files Modified

        threads/Makefile                  
        threads/main.cc                   
        threads/synch.cc                  
        threads/synch.h                   
        threads/threadtest.cc             

    + Files added

        threads/init.cc                   
        threads/patient.cc                
        threads/test_code.cc - This file is as provided, so i will not list
            anything in it as changes below

    + Data Structures added, and the file they were added to.

        init.cc:
            struct node
            struct linkedlist
            struct Receptionists
            struct Cashier
            struct PharmacyClerks
            struct Doctor
            struct DoorBoy

    + Data Structures modified, and the file they were added to.

        class Lock     -- in synch.cc/synch.h
        {
            Added data:
            Thread *owner;
            int numWaiting;
            List *queue;
            bool islocked;
            
            Modified Methods:
            Lock()
            ~Lock()
            Acquire()
            Release()
            isHeldByCurrentThread()
        }

        class Condition    -- in synch.cc/synch.h
        {
            Added data:
            List* queue;
            Lock* CVLock;

            Modified Methods:
            Condition()
            ~Condition()
            Wait()
            Signal()
            Broadcast()
        }

    + Functions added and in which file.

        threadtest.cc:
            Problem2()

        init.cc:
            void doorboy(int)
            void doctor(int)
            void receptionist(int)
            void cashier(int)
            void clerk(int)
            void hospitalManager(int)
            void HospINIT()

        patient.cc:
            void patients(int)

    + Functions modified and in which file.
        
        main.cc:
            Added command line options to run ThreadTest(), TestSuite(), and
            Problem2().

V. Testing: (For each test case, you must show)
    + How to test

        -Test Case 1: Patients only get in when the doorboy asks them to.

            In this test, we initialize all the threads in the hospital
            simulation except the doorboy threads hence all the patients would
            get till the point that they have the token as given by the
            receptionist and select the doctor they want to see but do not
            continue beyond that and perpetually sleep as there is no one to
            wake them up and send them to the doctor.  

        -Test Case 3:
            
    + Test Output

        -Test Case 1:

            We would see the following messages from any of the patients:
            
            P_0:Attempt to acquire recpLineLock...
            P_0:success
            P_0: found shortest line R_0 len: 0
            P_0 Got woken up, get out of line and going to counter for token    
            P_0: Reading Token..
            P_0: My token is 1..yeah!!
            P_0: Signal receptionist R_0 to continue, I am done
            P_0 : Going to meet doctor D_1
            P_0 : Join line and Waiting for doorboy to tell me to go
            
            As we can see that all the patients would halt at this point. Hence
            proving to us that they cannot continue without a doorboy.

        -Test Case 3:


VI. Discussion:
    + Experiment expectation.  (What you hope will happen.)
    + Experiment result.  (What actually happens.)
    + Explanation

VII. Miscellaneous:

